# Generated by Django 2.2.6 on 2019-11-01 07:23

import ckeditor.fields
import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category_name', models.CharField(max_length=50, null=True)),
            ],
            options={
                'verbose_name_plural': 'Category',
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='Ingredients',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingredients', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': 'Ingredients',
                'db_table': 'ingredients',
            },
        ),
        migrations.CreateModel(
            name='Links',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon_name', models.CharField(blank=True, max_length=100, null=True)),
                ('social_url', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'verbose_name_plural': 'Social link',
                'db_table': 'links',
            },
        ),
        migrations.CreateModel(
            name='Recipe',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe', models.CharField(blank=True, max_length=100, null=True)),
                ('prep', models.CharField(blank=True, max_length=100, null=True)),
                ('cook', models.CharField(blank=True, max_length=100, null=True)),
                ('yields', models.CharField(blank=True, max_length=100, null=True)),
                ('img', models.FileField(blank=True, null=True, upload_to='')),
                ('steps', ckeditor.fields.RichTextField(default=0)),
                ('date', models.DateField(blank=True, default=datetime.date.today, null=True)),
                ('category_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='blogapp.Category')),
                ('ingredients', models.ManyToManyField(blank=True, to='blogapp.Ingredients')),
            ],
            options={
                'verbose_name': 'Recipe',
                'db_table': 'recipe',
            },
        ),
        migrations.CreateModel(
            name='Slider',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slider_image', models.FileField(blank=True, null=True, upload_to='')),
            ],
            options={
                'verbose_name': 'Slider',
                'db_table': 'slider',
            },
        ),
        migrations.CreateModel(
            name='Type',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Type',
                'db_table': 'type',
            },
        ),
        migrations.CreateModel(
            name='Slider_child',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slider_caption1', models.CharField(blank=True, max_length=100, null=True)),
                ('slider_caption2', models.CharField(blank=True, max_length=100, null=True)),
                ('slider_caption3', models.CharField(blank=True, max_length=100, null=True)),
                ('slider_image', models.ManyToManyField(blank=True, to='blogapp.Slider')),
            ],
            options={
                'verbose_name_plural': 'Slider child',
                'db_table': 'slider_child',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('email', models.EmailField(blank=True, max_length=70, null=True, unique=True)),
                ('subject', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('recipe', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='recipes', to='blogapp.Recipe')),
            ],
            options={
                'verbose_name': 'Review',
                'db_table': 'review',
            },
        ),
        migrations.AddField(
            model_name='recipe',
            name='type_name',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='type', to='blogapp.Type'),
        ),
        migrations.CreateModel(
            name='Realuser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=100)),
                ('token', models.CharField(default='111', max_length=255, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Realuser',
                'db_table': 'realuser',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
